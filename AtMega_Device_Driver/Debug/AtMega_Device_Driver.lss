
AtMega_Device_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800060  00800060  00000402  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000402  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000434  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ef2  00000000  00000000  000005f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095f  00000000  00000000  000014e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9f  00000000  00000000  00001e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d0  00000000  00000000  000029e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000791  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aa5  00000000  00000000  00003641  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000040e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4a 00 	jmp	0x94	; 0x94 <__vector_1>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__vector_2>
   c:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 cf 00 	jmp	0x19e	; 0x19e <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_10>
  2c:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e8       	ldi	r30, 0x8E	; 142
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 37       	cpi	r26, 0x75	; 117
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c5 01 	jmp	0x38a	; 0x38a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
 */ 
#define F_CPU 16000000UL
#include <util/delay.h>

int main(void)
{
  92:	ff cf       	rjmp	.-2      	; 0x92 <main>

00000094 <__vector_1>:
		break;
		
	}
}
ISR(INT0_vect)
{
  94:	1f 92       	push	r1
  96:	0f 92       	push	r0
  98:	0f b6       	in	r0, 0x3f	; 63
  9a:	0f 92       	push	r0
  9c:	11 24       	eor	r1, r1
  9e:	2f 93       	push	r18
  a0:	3f 93       	push	r19
  a2:	4f 93       	push	r20
  a4:	5f 93       	push	r21
  a6:	6f 93       	push	r22
  a8:	7f 93       	push	r23
  aa:	8f 93       	push	r24
  ac:	9f 93       	push	r25
  ae:	af 93       	push	r26
  b0:	bf 93       	push	r27
  b2:	ef 93       	push	r30
  b4:	ff 93       	push	r31
	if(INT0_ptr != NULL)
  b6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <INT0_ptr>
  ba:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <INT0_ptr+0x1>
  be:	30 97       	sbiw	r30, 0x00	; 0
  c0:	09 f0       	breq	.+2      	; 0xc4 <__vector_1+0x30>
	{
		INT0_ptr();
  c2:	09 95       	icall
	}
}
  c4:	ff 91       	pop	r31
  c6:	ef 91       	pop	r30
  c8:	bf 91       	pop	r27
  ca:	af 91       	pop	r26
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	7f 91       	pop	r23
  d2:	6f 91       	pop	r22
  d4:	5f 91       	pop	r21
  d6:	4f 91       	pop	r20
  d8:	3f 91       	pop	r19
  da:	2f 91       	pop	r18
  dc:	0f 90       	pop	r0
  de:	0f be       	out	0x3f, r0	; 63
  e0:	0f 90       	pop	r0
  e2:	1f 90       	pop	r1
  e4:	18 95       	reti

000000e6 <__vector_2>:
ISR(INT1_vect)
{
  e6:	1f 92       	push	r1
  e8:	0f 92       	push	r0
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	0f 92       	push	r0
  ee:	11 24       	eor	r1, r1
  f0:	2f 93       	push	r18
  f2:	3f 93       	push	r19
  f4:	4f 93       	push	r20
  f6:	5f 93       	push	r21
  f8:	6f 93       	push	r22
  fa:	7f 93       	push	r23
  fc:	8f 93       	push	r24
  fe:	9f 93       	push	r25
 100:	af 93       	push	r26
 102:	bf 93       	push	r27
 104:	ef 93       	push	r30
 106:	ff 93       	push	r31
	if(INT1_ptr != NULL)
 108:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <INT1_ptr>
 10c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <INT1_ptr+0x1>
 110:	30 97       	sbiw	r30, 0x00	; 0
 112:	09 f0       	breq	.+2      	; 0x116 <__vector_2+0x30>
	{
		INT1_ptr();
 114:	09 95       	icall
	}
}
 116:	ff 91       	pop	r31
 118:	ef 91       	pop	r30
 11a:	bf 91       	pop	r27
 11c:	af 91       	pop	r26
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	7f 91       	pop	r23
 124:	6f 91       	pop	r22
 126:	5f 91       	pop	r21
 128:	4f 91       	pop	r20
 12a:	3f 91       	pop	r19
 12c:	2f 91       	pop	r18
 12e:	0f 90       	pop	r0
 130:	0f be       	out	0x3f, r0	; 63
 132:	0f 90       	pop	r0
 134:	1f 90       	pop	r1
 136:	18 95       	reti

00000138 <__vector_3>:
ISR(INT2_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
	if(INT2_ptr != NULL)
 15a:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 15e:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	09 f0       	breq	.+2      	; 0x168 <__vector_3+0x30>
	{
		INT2_ptr();
 166:	09 95       	icall
	}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <TIMER1_Stop>:
		}
		break;
		*/
	}
	SET_BIT(ICU_TIMSK_REG,TICIE1);
	TIMER1_Start(prescaler);
 18a:	8e b5       	in	r24, 0x2e	; 46
 18c:	8e 7f       	andi	r24, 0xFE	; 254
 18e:	8e bd       	out	0x2e, r24	; 46
 190:	8e b5       	in	r24, 0x2e	; 46
 192:	8d 7f       	andi	r24, 0xFD	; 253
 194:	8e bd       	out	0x2e, r24	; 46
 196:	8e b5       	in	r24, 0x2e	; 46
 198:	8b 7f       	andi	r24, 0xFB	; 251
 19a:	8e bd       	out	0x2e, r24	; 46
 19c:	08 95       	ret

0000019e <__vector_6>:

//void __vector_6 (void)        __attribute__((signal));

//void __vector_6 (void)    
ISR(TIMER1_CAPT_vect)    
{
 19e:	1f 92       	push	r1
 1a0:	0f 92       	push	r0
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	0f 92       	push	r0
 1a6:	11 24       	eor	r1, r1
 1a8:	2f 93       	push	r18
 1aa:	3f 93       	push	r19
 1ac:	4f 93       	push	r20
 1ae:	5f 93       	push	r21
 1b0:	6f 93       	push	r22
 1b2:	7f 93       	push	r23
 1b4:	8f 93       	push	r24
 1b6:	9f 93       	push	r25
 1b8:	af 93       	push	r26
 1ba:	bf 93       	push	r27
 1bc:	ef 93       	push	r30
 1be:	ff 93       	push	r31
	//TOGGLE_BIT(ICU_TIMSK_REG,TOIE1);
	//SET_BIT(ICU_TIMSK_REG,TOIE1);
	//TOGGLE_BIT(ICU_TIMSK_REG,TOIE0);
	static u8 flag = 0;
	static u16 old_value=0;
	if(flag==0)
 1c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <flag.1669>
 1c4:	81 11       	cpse	r24, r1
 1c6:	13 c0       	rjmp	.+38     	; 0x1ee <__vector_6+0x50>
	{
		first_catch = ICU_ICR1_REG - old_value;
 1c8:	86 b5       	in	r24, 0x26	; 38
 1ca:	97 b5       	in	r25, 0x27	; 39
 1cc:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <old_value.1670>
 1d0:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <old_value.1670+0x1>
 1d4:	82 1b       	sub	r24, r18
 1d6:	93 0b       	sbc	r25, r19
 1d8:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <first_catch+0x1>
 1dc:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <first_catch>
		flag =1;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <flag.1669>
		CLEAR_BIT(ICU_TCCR1B_REG,ICES1);
 1e6:	8e b5       	in	r24, 0x2e	; 46
 1e8:	8f 7b       	andi	r24, 0xBF	; 191
 1ea:	8e bd       	out	0x2e, r24	; 46
 1ec:	13 c0       	rjmp	.+38     	; 0x214 <__vector_6+0x76>
		
	}
	else
	{
		second_catch = ICU_ICR1_REG - old_value;
 1ee:	86 b5       	in	r24, 0x26	; 38
 1f0:	97 b5       	in	r25, 0x27	; 39
 1f2:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <old_value.1670>
 1f6:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <old_value.1670+0x1>
 1fa:	82 1b       	sub	r24, r18
 1fc:	93 0b       	sbc	r25, r19
 1fe:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <second_catch+0x1>
 202:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <second_catch>
		flag =0;
 206:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <flag.1669>
		SET_BIT(ICU_TCCR1B_REG,ICES1);
 20a:	8e b5       	in	r24, 0x2e	; 46
 20c:	80 64       	ori	r24, 0x40	; 64
 20e:	8e bd       	out	0x2e, r24	; 46
		TIMER1_Stop();
 210:	0e 94 c5 00 	call	0x18a	; 0x18a <TIMER1_Stop>
		
	}
	old_value = ICU_ICR1_REG;
 214:	86 b5       	in	r24, 0x26	; 38
 216:	97 b5       	in	r25, 0x27	; 39
 218:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <old_value.1670+0x1>
 21c:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <old_value.1670>
};
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_11>:
		
	}
	
}
ISR(TIMER0_OVF_vect)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	if(PTR_OVERFLOW!= NULL)
 264:	e0 91 6f 00 	lds	r30, 0x006F	; 0x80006f <PTR_OVERFLOW>
 268:	f0 91 70 00 	lds	r31, 0x0070	; 0x800070 <PTR_OVERFLOW+0x1>
 26c:	30 97       	sbiw	r30, 0x00	; 0
 26e:	09 f0       	breq	.+2      	; 0x272 <__vector_11+0x30>
	{
		PTR_OVERFLOW();
 270:	09 95       	icall
	}
}
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	2f 93       	push	r18
 2a0:	3f 93       	push	r19
 2a2:	4f 93       	push	r20
 2a4:	5f 93       	push	r21
 2a6:	6f 93       	push	r22
 2a8:	7f 93       	push	r23
 2aa:	8f 93       	push	r24
 2ac:	9f 93       	push	r25
 2ae:	af 93       	push	r26
 2b0:	bf 93       	push	r27
 2b2:	ef 93       	push	r30
 2b4:	ff 93       	push	r31
	if(PTR_ONCOMP != NULL)
 2b6:	e0 91 6d 00 	lds	r30, 0x006D	; 0x80006d <PTR_ONCOMP>
 2ba:	f0 91 6e 00 	lds	r31, 0x006E	; 0x80006e <PTR_ONCOMP+0x1>
 2be:	30 97       	sbiw	r30, 0x00	; 0
 2c0:	09 f0       	breq	.+2      	; 0x2c4 <__vector_10+0x30>
	{
		PTR_ONCOMP();
 2c2:	09 95       	icall
	}
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <__vector_13>:
#include <avr/interrupt.h>

u8 BB[32]={'\0'};
void (* UART_RX_INTERRUPT)(void)=NULL; 
void (* UART_TX_INTERRUPT)(void)=NULL;
ISR(USART_RXC_vect){
 2e6:	1f 92       	push	r1
 2e8:	0f 92       	push	r0
 2ea:	0f b6       	in	r0, 0x3f	; 63
 2ec:	0f 92       	push	r0
 2ee:	11 24       	eor	r1, r1
 2f0:	2f 93       	push	r18
 2f2:	3f 93       	push	r19
 2f4:	4f 93       	push	r20
 2f6:	5f 93       	push	r21
 2f8:	6f 93       	push	r22
 2fa:	7f 93       	push	r23
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	af 93       	push	r26
 302:	bf 93       	push	r27
 304:	ef 93       	push	r30
 306:	ff 93       	push	r31

	if (UART_RX_INTERRUPT != NULL){
 308:	e0 91 73 00 	lds	r30, 0x0073	; 0x800073 <UART_RX_INTERRUPT>
 30c:	f0 91 74 00 	lds	r31, 0x0074	; 0x800074 <UART_RX_INTERRUPT+0x1>
 310:	30 97       	sbiw	r30, 0x00	; 0
 312:	09 f0       	breq	.+2      	; 0x316 <__vector_13+0x30>
		UART_RX_INTERRUPT();
 314:	09 95       	icall
	}
}
 316:	ff 91       	pop	r31
 318:	ef 91       	pop	r30
 31a:	bf 91       	pop	r27
 31c:	af 91       	pop	r26
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	7f 91       	pop	r23
 324:	6f 91       	pop	r22
 326:	5f 91       	pop	r21
 328:	4f 91       	pop	r20
 32a:	3f 91       	pop	r19
 32c:	2f 91       	pop	r18
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_15>:


ISR(USART_TXC_vect){
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	2f 93       	push	r18
 344:	3f 93       	push	r19
 346:	4f 93       	push	r20
 348:	5f 93       	push	r21
 34a:	6f 93       	push	r22
 34c:	7f 93       	push	r23
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	af 93       	push	r26
 354:	bf 93       	push	r27
 356:	ef 93       	push	r30
 358:	ff 93       	push	r31

	if (UART_TX_INTERRUPT != NULL){
 35a:	e0 91 71 00 	lds	r30, 0x0071	; 0x800071 <UART_TX_INTERRUPT>
 35e:	f0 91 72 00 	lds	r31, 0x0072	; 0x800072 <UART_TX_INTERRUPT+0x1>
 362:	30 97       	sbiw	r30, 0x00	; 0
 364:	09 f0       	breq	.+2      	; 0x368 <__vector_15+0x30>
		UART_TX_INTERRUPT();
 366:	09 95       	icall
	}
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0f be       	out	0x3f, r0	; 63
 384:	0f 90       	pop	r0
 386:	1f 90       	pop	r1
 388:	18 95       	reti

0000038a <_exit>:
 38a:	f8 94       	cli

0000038c <__stop_program>:
 38c:	ff cf       	rjmp	.-2      	; 0x38c <__stop_program>
